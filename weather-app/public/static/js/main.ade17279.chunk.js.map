{"version":3,"sources":["theme/media.js","theme/GlobalStyle.js","components/WeatherData.js","components/WeatherOptions.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["sizeInts","mediaSize","xs","sm","md","lg","xl","device","maxSm","maxMd","maxLg","maxXL","GlobalStyle","createGlobalStyle","weatherIconUrl","icon","ZIP_QUERY","gql","WEATHER_QUERY","Wrapper","styled","div","WeatherIcon","TempRow","WeatherDetails","WeatherData","props","zipcode","units","weatherData","query","variables","loading","error","data","coords","name","coord","console","log","lon","lat","skip","undefined","wLoading","wError","wData","weather","current","temp","feels_like","humidity","uvi","description","className","src","alt","Math","round","FlexSpacer","ToggleSwitch","imperial","UnitsButtons","UnitsButton","SearchForm","form","TextInput","input","Lookup","Submit","disabled","WeatherOptions","toggleUnits","zipcodeInputChanged","zipcodeSubmit","zipcodeValue","zipcodeValid","onClick","onSubmit","e","type","placeholder","onChange","value","initialState","zipcodeInput","valid","touched","Weather","state","zipcodeInputChangedHandler","target","updatedZipcodeInput","length","test","setState","zipcodeSubmitHandler","preventDefault","toggleUnitsHandler","prevState","this","Component","theme","primary","App","href","Boolean","window","location","hostname","match","client","ApolloClient","uri","app","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.ade17279.chunk.js","sourcesContent":["export const sizeInts = {\n  xs: 450,\n  sm: 576,\n  md: 768,\n  lg: 992,\n  xl: 1200,\n};\n\nexport const mediaSize = {\n  xs: `${sizeInts.xs}px`,\n  sm: `${sizeInts.sm}px`,\n  md: `${sizeInts.md}px`,\n  lg: `${sizeInts.lg}px`,\n  xl: `${sizeInts.xl}px`,\n};\n\nexport const device = {\n  sm: `(min-width: ${mediaSize.sm})`,\n  md: `(min-width: ${mediaSize.md})`,\n  lg: `(min-width: ${mediaSize.lg})`,\n  xl: `(min-width: ${mediaSize.xl})`,\n  maxSm: `(max-width: ${sizeInts.sm - 1}px)`,\n  maxMd: `(max-width: ${sizeInts.md - 1}px)`,\n  maxLg: `(max-width: ${sizeInts.lg - 1}px)`,\n  maxXL: `(max-width: ${sizeInts.xl - 1}px)`,\n};\n","import { createGlobalStyle } from 'styled-components';\nimport { device } from './media';\n\nconst GlobalStyle = createGlobalStyle`\n  * { \n    margin: 0;\n    padding: 0;\n  }\n\n  *,\n  *::after,\n  *::before {\n    box-sizing: inherit;\n    -moz-box-sizing: inherit; \n    -webkit-box-sizing: inherit;\n  }\n\n  html {\n    box-sizing: border-box;\n    font-size: 50%;\n\n    @media ${device.md} {\n      font-size: 62.5%; \n    }\n\n    @media ${device.xl} {\n      font-size: 75%; \n    }\n  }\n\n  body {\n    background-image: linear-gradient(165deg, grey, white);\n    background-size: cover;\n    background-repeat: no-repeat;\n    min-height: 100vh;\n    font-size: 1.8rem;\n\n    address, h1, h2, h3, h4, h5, h6 {\n    }\n    \n    * {\n      display: flex;\n      flex-flow: column;\n      align-items: center;\n      text-align: center;\n    }\n    \n    h1 {\n    }\n\n    h2 {\n    }\n\n    @media ${device.md} {\n      font-size: 1.4rem;\n    }\n  }\n`;\n\nexport default GlobalStyle;","import React from 'react';\nimport styled from 'styled-components';\nimport { device } from 'theme/media';\nimport { Query } from 'react-apollo';\nimport gql from 'graphql-tag';\n\nconst weatherIconUrl = (icon) => `http://openweathermap.org/img/wn/${icon}@2x.png`\n\nconst ZIP_QUERY = gql`\n  query ZipQuery($zipcode: String) {\n    coords(zipcode: $zipcode) {\n      name\n      coord {\n        lon\n        lat\n      }\n    }\n  }\n`\nconst WEATHER_QUERY = gql`\n  query WeatherQuery($lon: String, $lat: String, $units: String) {\n    weather(lon: $lon, lat: $lat, units: $units) {\n      current {\n        temp\n        feels_like\n        humidity\n        uvi\n        weather {\n          description\n          icon\n        }\n      }\n    }\n  }\n`;\n\nconst Wrapper = styled.div`\n  width: 30rem;\n  padding: 4rem;\n  margin-bottom: 5rem;\n  border-radius: 4px;\n  background-image: linear-gradient(165deg, white 35%, grey);\n\n  .name {\n    text-align: center;\n  }\n\n  @media ${device.sm} {}\n\n\n  @media ${device.lg} {}\n\n  @media ${device.xl} {}\n`;\n\nconst WeatherIcon = styled.div`\n  width: 18rem;\n  height: 18rem;\n\n  img {\n    width: 100%;\n    height: auto;\n  }\n`\n\nconst TempRow = styled.div`\n  margin-bottom: 4rem;\n\n  .temp {\n    &__main {\n      font-size: 3.2rem;\n      color: orangered;\n    }\n\n    &__description {\n      margin-top: 2rem;\n      font-size: 1.8rem;\n      text-transform: uppercase;\n\n      > :first-child {\n        font-size: 2.4rem;\n      }\n    }\n  }\n\n  /* @media ${device.md} {\n    flex-direction: row;\n    justify-content: space-evenly;\n    height: 10rem;\n  } */\n`;\n\nconst WeatherDetails = styled.div``;\n\n\nconst WeatherData = (props) => {\n  const { zipcode, units } = props;\n\n  const weatherData = (\n    <Query query={ZIP_QUERY} variables={{ zipcode }}>\n        {\n          ({ loading, error, data: { coords: { name, coord } = {} } = {} }) => {\n            if (loading) return <h1>... Loading</h1>\n            if (error) { console.log(error); return null; }\n            if (!name || !coord) {\n              return (\n                <div>\n                  <h3>{`No data for zipcode ${zipcode}`}</h3>\n                  <p>please double-check your zipcode and re-enter</p>\n                </div>\n              )\n            }\n            return (\n              <Query\n                query={WEATHER_QUERY}\n                variables={{\n                  lon: `${coord.lon}`,\n                  lat: `${coord.lat}`,\n                  units,\n                }}\n                skip={coord === undefined}\n                >\n                {\n                  ({ loading: wLoading, error: wError, data: wData }) => {\n                    if (wLoading) return <h1>... Loading</h1>\n                    if (wError) { console.log(wError); return; }\n                    const {\n                      current: {\n                        temp,\n                        feels_like,\n                        humidity,\n                        uvi,\n                        weather,\n                      },\n                    } = wData.weather;\n                    const { icon, description } = weather[0];\n                    return (\n                      <div>\n                        <WeatherDetails>\n                          <div className=\"name\">\n                            <h1>{name}</h1>\n                          </div>\n                          <WeatherIcon>\n                            <img src={weatherIconUrl(icon)} alt={description} />  \n                          </WeatherIcon>\n                          <TempRow>\n                            <div className=\"temp__main\">\n                              {`${Math.round(temp)} ˚${units === 'imperial' ? 'F' : 'C'}`}\n                            </div>\n                            <div className=\"temp__description\">\n                              <div>{description}</div>\n                              <div>{`Feels Like: ${Math.round(feels_like)} ˚${units === 'imperial' ? 'F' : 'C'}`}</div>\n                            </div>\n                          </TempRow>\n                          <div>\n                            Humidity: {humidity}\n                          </div>\n                          <div>\n                            UV: {Math.round(uvi)}\n                          </div>\n                        </WeatherDetails>\n                      </div>\n                    )\n                  }\n                }\n              </Query>\n            )\n          }\n        }\n      </Query>\n  )\n\n  return (\n    <Wrapper>\n      {weatherData}\n    </Wrapper>\n  );\n};\n\nWeatherData.propTypes = {\n};\n\nexport default WeatherData\n","import React from 'react';\nimport styled from 'styled-components';\nimport { device } from 'theme/media';\n\nconst Wrapper = styled.div`\n  width: 30rem;\n  padding: 1rem;\n  border: 1px inset grey;\n  border-radius: 4px;\n\n  > :not(:first-child) {\n    margin-top: 2rem;\n  }\n\n  @media ${device.sm} {}\n\n  @media ${device.md} {}\n\n  @media ${device.lg} {}\n\n  @media ${device.xl} {}\n`;\n\nconst FlexSpacer = styled.div`\n  flex: 1;\n`;\n\nconst ToggleSwitch = styled.div`\n  width: 4.6rem;\n  height: 4.6rem;\n  border-radius: 50%;\n  background-color: white;\n  position: absolute;\n  margin: 0 .4rem;\n  transition: .2s all ease-in-out;\n\n  transform: ${({ imperial }) => (\n    imperial\n      ? `translateX(0)`\n      : `translateX(4.8rem)`\n  )};\n`;\n\nconst UnitsButtons = styled.div`\n  width: 10rem;\n  flex-direction: row;\n  border-radius: 5rem;\n  overflow: hidden;\n  background-color: grey;\n  position: relative; \n`;\n\nconst UnitsButton = styled.div`\n  width: 5rem;\n  height: 5rem;\n  justify-content: center;\n  z-index: 9999;\n`;\n\nconst SearchForm = styled.form`\n  flex-direction: row;\n  justify-content: space-between;\n  width: 100%;\n  align-items: flex-end;\n`\n\nconst TextInput = styled.input`\n  height: 3rem;\n  padding-left: 1rem;\n  text-align: left;\n  font-size: 1.8rem;\n  width: 18rem;\n`;\n\nconst Lookup = styled.div`\n  align-items: flex-start;\n  width: 18rem;\n\n  label {\n    font-size: 1.2rem;\n    font-weight: bold;\n    text-transform: uppercase;\n  }\n`\n\nconst Submit = styled.input`\n  height: 3rem;\n  font-size: 1.4rem;\n  padding: 0 1rem;\n  justify-content: center;\n  background-color: ${({ disabled }) => (\n    disabled ? 'inherit' : 'orangered'\n  )};\n  color: ${({ disabled }) => (\n    disabled ? 'inherit' : 'white'\n  )};\n  border: 1px solid ${({ disabled }) => (\n    disabled ? 'inherit' : 'white'\n  )};\n  border-radius: 4px;\n  border-style: solid;\n`\n\nconst WeatherOptions = (props) => {\n  const { \n    imperial, toggleUnits, zipcodeInputChanged, zipcodeSubmit, \n    zipcodeValue, zipcodeValid,\n  } = props;\n\n  return (\n    <Wrapper>\n      <UnitsButtons\n        imperial={imperial}\n        onClick={toggleUnits}\n        >\n        <UnitsButton>˚F</UnitsButton>\n        <FlexSpacer />\n        <UnitsButton>˚C</UnitsButton>\n        <ToggleSwitch imperial={imperial} />\n      </UnitsButtons>\n\n      <SearchForm onSubmit={(e) => zipcodeSubmit(e)}>\n        <Lookup>\n          <label>Zipcode</label>\n          <TextInput\n            type=\"text\"\n            placeholder=\"ex: 94122\"\n            onChange={(e) => zipcodeInputChanged(e)}\n            value={zipcodeValue}\n          />\n        </Lookup>\n        <Submit type=\"submit\" value=\"Look Up\" disabled={!zipcodeValid} />\n      </SearchForm>\n    </Wrapper>\n  );\n};\n\nWeatherOptions.propTypes = {\n};\n\nexport default WeatherOptions\n","import React, { Component } from 'react'\nimport styled from 'styled-components'\nimport WeatherData from './WeatherData'\nimport WeatherOptions from './WeatherOptions';\n\n\nconst Wrapper = styled.div`\n  width: 100%;\n  min-height: 100vh;\n  margin: 5rem 0;\n`;\n\nconst initialState = {\n  zipcode: '94122',\n  units: 'imperial',\n  zipcodeInput: {\n    value: '',\n    valid: false,\n    touched: false,\n  }\n}\n\nclass Weather extends Component {\n  state = {\n    zipcode: '94122',\n    units: 'imperial',\n    zipcodeInput: {\n      value: '',\n      valid: false,\n      touched: false,\n    }\n  }\n\n  zipcodeInputChangedHandler = (e) => {\n    const { target: { value } } = e;\n    const { zipcodeInput } = this.state;\n    const updatedZipcodeInput = { ...zipcodeInput };\n    const regNum = /^\\d+$/;\n\n    if (value.length <= 5 && regNum.test(value[value.length - 1])) {\n      updatedZipcodeInput.value = value;\n      updatedZipcodeInput.touched = true;\n    }\n    if (value.length === 5) updatedZipcodeInput.valid = true;\n\n    this.setState({ zipcodeInput: updatedZipcodeInput })\n  }\n\n  zipcodeSubmitHandler = (e) => {\n    const { zipcodeInput: { value } } = this.state;\n\n    e.preventDefault();\n    this.setState({\n      zipcode: value,\n      zipcodeInput: initialState.zipcodeInput,\n    })    \n  }\n\n  toggleUnitsHandler = () => {\n    this.setState((prevState) => ({ units: prevState.units === 'imperial' ? 'metric' : 'imperial' }))\n  }\n\n  render() {\n    const { zipcode, units, zipcodeInput: { value, valid } } = this.state;\n\n    return (\n      <Wrapper>\n        <WeatherData\n          zipcode={zipcode}\n          units={units}\n        />\n        <WeatherOptions\n          imperial={units === 'imperial'}\n          toggleUnits={this.toggleUnitsHandler}\n          zipcodeInputChanged={this.zipcodeInputChangedHandler}\n          zipcodeSubmit={this.zipcodeSubmitHandler}\n          zipcodeValue={value}\n          zipcodeValid={valid}\n        />\n      </Wrapper>\n    );\n  } \n}\n\nWeather.propTypes = {\n};\n\nexport default Weather\n","import React from 'react';\nimport { ThemeProvider } from 'styled-components';\nimport GlobalStyle from './theme/GlobalStyle';\nimport Weather from './components/Weather';\n\nconst theme = {\n  primary: 'orangered',\n}\n\nfunction App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <GlobalStyle />\n      <Weather />\n      <a href=\"https://kyledevlinmurray.com\">Back to Kyle's Homepage</a>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\n\nconst client = new ApolloClient({\n  uri: `/graphql`\n})\n\nconst app = (\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>\n)\n\nReactDOM.render(\n  app,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}